// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockUserRepositoryInterface) GetById(ctx context.Context, input GetUserByIdInput) (*GetUserByIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, input)
	ret0, _ := ret[0].(*GetUserByIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetById), ctx, input)
}

// GetByPhoneNumberIncludePassword mocks base method.
func (m *MockUserRepositoryInterface) GetByPhoneNumberIncludePassword(ctx context.Context, input GetUserByPhoneNumberInput) (*GetUserByPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumberIncludePassword", ctx, input)
	ret0, _ := ret[0].(*GetUserByPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumberIncludePassword indicates an expected call of GetByPhoneNumberIncludePassword.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByPhoneNumberIncludePassword(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumberIncludePassword", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByPhoneNumberIncludePassword), ctx, input)
}

// Insert mocks base method.
func (m *MockUserRepositoryInterface) Insert(ctx context.Context, input InsertUserInput) (*InsertUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, input)
	ret0, _ := ret[0].(*InsertUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRepositoryInterfaceMockRecorder) Insert(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Insert), ctx, input)
}

// Update mocks base method.
func (m *MockUserRepositoryInterface) Update(ctx context.Context, input UpdateUserInput) (*UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(*UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryInterfaceMockRecorder) Update(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Update), ctx, input)
}
