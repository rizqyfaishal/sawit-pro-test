// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/interfaces.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	forms "github.com/SawitProRecruitment/UserService/forms"
	pojos "github.com/SawitProRecruitment/UserService/pojos"
	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockUserServiceInterface) GetById(userId int64) (*pojos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId)
	ret0, _ := ret[0].(*pojos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserServiceInterfaceMockRecorder) GetById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserServiceInterface)(nil).GetById), userId)
}

// GetByPhoneNumber mocks base method.
func (m *MockUserServiceInterface) GetByPhoneNumber(phoneNumber string) (*pojos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", phoneNumber)
	ret0, _ := ret[0].(*pojos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockUserServiceInterfaceMockRecorder) GetByPhoneNumber(phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockUserServiceInterface)(nil).GetByPhoneNumber), phoneNumber)
}

// Register mocks base method.
func (m *MockUserServiceInterface) Register(form forms.UserRegisterForm) (*RegisterResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", form)
	ret0, _ := ret[0].(*RegisterResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceInterfaceMockRecorder) Register(form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceInterface)(nil).Register), form)
}

// Update mocks base method.
func (m *MockUserServiceInterface) Update(userId int64, form forms.UserUpdateForm) (*UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, form)
	ret0, _ := ret[0].(*UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceInterfaceMockRecorder) Update(userId, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServiceInterface)(nil).Update), userId, form)
}

// MockAuthenticationServiceInterface is a mock of AuthenticationServiceInterface interface.
type MockAuthenticationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceInterfaceMockRecorder
}

// MockAuthenticationServiceInterfaceMockRecorder is the mock recorder for MockAuthenticationServiceInterface.
type MockAuthenticationServiceInterfaceMockRecorder struct {
	mock *MockAuthenticationServiceInterface
}

// NewMockAuthenticationServiceInterface creates a new mock instance.
func NewMockAuthenticationServiceInterface(ctrl *gomock.Controller) *MockAuthenticationServiceInterface {
	mock := &MockAuthenticationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationServiceInterface) EXPECT() *MockAuthenticationServiceInterfaceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationServiceInterface) Authenticate(form forms.UserLoginForm) (*AuthenticationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", form)
	ret0, _ := ret[0].(*AuthenticationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationServiceInterfaceMockRecorder) Authenticate(form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationServiceInterface)(nil).Authenticate), form)
}

// Authorize mocks base method.
func (m *MockAuthenticationServiceInterface) Authorize(token string) (*AuthorizationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", token)
	ret0, _ := ret[0].(*AuthorizationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthenticationServiceInterfaceMockRecorder) Authorize(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthenticationServiceInterface)(nil).Authorize), token)
}
